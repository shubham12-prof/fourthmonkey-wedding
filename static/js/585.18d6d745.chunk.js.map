{"version":3,"file":"static/js/585.18d6d745.chunk.js","mappings":"wMAOA,MAoEA,EApEeA,KACb,MAAM,UAAEC,IAAcC,EAAAA,EAAAA,KAChBC,EAAUC,EAAAA,EAASC,MAAMC,GAASA,EAAKC,KAAOC,SAASP,MAEtDQ,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,IAC3CC,GAAkBC,EAAAA,EAAAA,QAAO,CAAC,GA4BhC,IA1BAC,EAAAA,EAAAA,YAAU,KACR,GAAIX,EAAS,CACX,MAAMY,EAAiB,GACjBC,EAAmB,GAEzB,IAAIC,EAAc,EAClBd,EAAQe,cAAcC,SAASC,IAC7B,MAAMC,EAAM,IAAIC,MAChBD,EAAIE,IAAMH,EAAMI,SAChBH,EAAII,OAAS,KACSJ,EAAIK,MAAQL,EAAIM,OAClB,EAChBX,EAAiBY,KAAKR,GAEtBL,EAAea,KAAKR,GAGtBH,IACIA,IAAgBd,EAAQe,cAAcW,QACxCnB,EAAgB,IAAIK,KAAmBC,GACzC,CACD,GAEL,IACC,CAACb,KAECA,EAAS,OAAO2B,EAAAA,EAAAA,KAAA,KAAAC,SAAG,sBAMxB,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAoBC,MAAO,CAAEC,UAAW,QAASJ,SAAA,EAC9DC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CACG5B,EAAQiC,MAAM,aAASN,EAAAA,EAAAA,KAAA,QAAMG,UAAU,oBAE1CH,EAAAA,EAAAA,KAAA,MAAAC,SAAK5B,EAAQkC,gBACbP,EAAAA,EAAAA,KAAA,OAAKG,UAAU,eAAcF,SAC1BtB,EAAa6B,KAAI,CAAClB,EAAOmB,KACxB,MAAMC,EAAoB,IAAVD,EACVE,EAAW7B,EAAgB8B,QAAQH,GAEzC,OACET,EAAAA,EAAAA,KAACa,EAAAA,cAAa,CAEZC,IAAG,iBAAAC,OAAmBN,EAAQ,GAC9BhB,IAAKH,EAAMI,SACXsB,OAAQL,OAAWM,EAAY,OAC/Bd,UAAS,gBAAAY,OAAkBL,EAAU,QAAU,GAAE,UAAAK,OAASN,EAAQ,GAClES,iBAAgB,wBAAAH,OAA0BL,EAAU,QAAU,GAAE,KAAAK,OAAIJ,EAAW,SAAW,WAE1FQ,OAAQA,IAxBKV,KACvB3B,EAAgB8B,QAAQH,IAAS,CAAI,EAuBbW,CAAgBX,IAPzBA,EAQL,QAIJ,C","sources":["Components/Gallary/Images.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./Images.css\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { projects } from \"../Portfolio/ProtfolioData\";\r\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\r\nimport \"react-lazy-load-image-component/src/effects/blur.css\";\r\n\r\nconst Images = () => {\r\n  const { projectId } = useParams();\r\n  const project = projects.find((proj) => proj.id === parseInt(projectId));\r\n\r\n  const [sortedImages, setSortedImages] = useState([]);\r\n  const loadedImagesRef = useRef({});\r\n\r\n  useEffect(() => {\r\n    if (project) {\r\n      const verticalImages = [];\r\n      const horizontalImages = [];\r\n\r\n      let loadedCount = 0;\r\n      project.galleryImages.forEach((image) => {\r\n        const img = new Image();\r\n        img.src = image.original;\r\n        img.onload = () => {\r\n          const aspectRatio = img.width / img.height;\r\n          if (aspectRatio > 1) {\r\n            horizontalImages.push(image);\r\n          } else {\r\n            verticalImages.push(image);\r\n          }\r\n\r\n          loadedCount++;\r\n          if (loadedCount === project.galleryImages.length) {\r\n            setSortedImages([...verticalImages, ...horizontalImages]);\r\n          }\r\n        };\r\n      });\r\n    }\r\n  }, [project]);\r\n\r\n  if (!project) return <p>Project not found</p>;\r\n\r\n  const handleImageLoad = (index) => {\r\n    loadedImagesRef.current[index] = true;\r\n  };\r\n\r\n  return (\r\n    <div className=\"gallery-container\" style={{ marginTop: \"6rem\" }}>\r\n      <h1>\r\n        {project.title} Gallery <span className=\"yellow-line\"></span>\r\n      </h1>\r\n      <h1>{project.galleryTitle}</h1>\r\n      <div className=\"grid-gallery\">\r\n        {sortedImages.map((image, index) => {\r\n          const isLarge = index === 0;\r\n          const isLoaded = loadedImagesRef.current[index];\r\n\r\n          return (\r\n            <LazyLoadImage\r\n              key={index}\r\n              alt={`Gallery image ${index + 1}`}\r\n              src={image.original}\r\n              effect={isLoaded ? undefined : \"blur\"}\r\n              className={`gallery-item ${isLarge ? \"large\" : \"\"} item-${index + 1}`}\r\n              wrapperClassName={`gallery-item-wrapper ${isLarge ? \"large\" : \"\"} ${isLoaded ? \"loaded\" : \"loading\"\r\n                }`}\r\n              onLoad={() => handleImageLoad(index)}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Images;\r\n"],"names":["Images","projectId","useParams","project","projects","find","proj","id","parseInt","sortedImages","setSortedImages","useState","loadedImagesRef","useRef","useEffect","verticalImages","horizontalImages","loadedCount","galleryImages","forEach","image","img","Image","src","original","onload","width","height","push","length","_jsx","children","_jsxs","className","style","marginTop","title","galleryTitle","map","index","isLarge","isLoaded","current","LazyLoadImage","alt","concat","effect","undefined","wrapperClassName","onLoad","handleImageLoad"],"sourceRoot":""}